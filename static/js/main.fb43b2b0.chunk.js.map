{"version":3,"sources":["pages/SignIn/components/Logo/logo.module.scss","components/Loader/loader.module.scss","components/StartAppFail/start-app-fail.module.scss","pages/SignIn/components/Languages/item.js","pages/SignIn/components/Languages/index.js","pages/SignIn/components/Logo/index.js","pages/SignIn/index.js","components/Loader/index.js","components/StartAppFail/index.js","pages/App.js","serviceWorker.js","redux/reducers/auth.js","redux/reducers/settings.js","api/index.js","redux/asyncStore.js","redux/store.js","redux/reducers/index.js","index.js","pages/SignIn/components/Languages/languages.module.scss","pages/SignIn/signin.module.scss"],"names":["module","exports","LangItem","setlang","lang","a","async","props","locale","value","fetch","process","request","json","translates","loadTranslations","setLocale","localStorage","setItem","moment","notification","error","key","message","I18n","t","description","this","language","Text","onClick","className","classnames","styles","Component","connect","state","i18n","dispatch","bindActionCreators","Languages","list","type","justify","align","gutter","map","item","PureComponent","Logo","src","alt","Content","Layout","SignIn","Loader","StartAppFail","window","location","reload","loading","asyncInitialState","exact","path","component","to","Boolean","hostname","match","initialState","token","getItem","user","isFetching","action","MrkClientServiceClient","setThrift","THRIFT","Thrift","Protocol","Transport","URL","API","getInitialState","currentState","Promise","resolve","reject","store","auth","frontRequest","frontSettings","isAuthSessionExpired","removeItem","getAllLanguages","languages","getInfo","settings","DEFAULT_TRANSLATE","LANG","translate","translations","reduce","array","push","name","history","createBrowserHistory","middlewares","thunk","withExtraArgument","api","routerMiddleware","enhancers","composeWithDevTools","applyMiddleware","createStore","combineReducers","router","connectRouter","i18nReducer","modals","compose","create","syncTranslationWithStore","ModalRootWithStore","ModalRoot","console","log","App","ReactDOM","render","modalComponents","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb43b2b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"logo_wrapper__3vcav\",\"text\":\"logo_text__1Cx8t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__2sbTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"start-app-fail_wrapper__39QCk\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport classnames from 'classnames';\nimport * as styles from './languages.module.scss';\nimport { notification, Typography, Col } from 'antd';\nimport moment from 'moment';\nimport { loadTranslations, setLocale, I18n } from 'react-redux-i18n';\n\nclass LangItem extends Component {\n  setlang = async lang => {\n    const { locale } = this.props;\n    if (locale === lang.value) return null;\n    try {\n      const request = await fetch(`${process.env.PUBLIC_URL}translates/${lang.value}.json`);\n      const translates = await request.json();\n      this.props.loadTranslations({ [lang.value]: translates });\n      this.props.setLocale(lang.value);\n      localStorage.setItem('lang', lang.value);\n      moment.locale(lang.value);\n    } catch (error) {\n      notification.error({\n        key: 'locale_not_found',\n        message: I18n.t('common.error'),\n        description: I18n.t('SignIn.locale_not_found')\n      });\n    }\n  };\n\n  render() {\n    const { locale, language } = this.props;\n    return (\n      <Col>\n        <Typography.Text\n          onClick={() => this.setlang(language)}\n          className={classnames(\n            styles.item,\n            language.value === locale ? styles.active : null\n          )}\n        >\n          {language.value}\n        </Typography.Text>\n      </Col>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  locale: state.i18n.locale\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      loadTranslations,\n      setLocale\n    },\n    dispatch\n  );\nexport default connect(mapStateToProps, mapDispatchToProps)(LangItem);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport * as styles from './languages.module.scss';\nimport LangItem from './item';\nimport { Row } from 'antd';\nclass Languages extends PureComponent {\n  render() {\n    const { list = [] } = this.props;\n    return (\n      <Row\n        className={styles.list}\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        gutter={16}\n      >\n        {list.map(item => (\n          <LangItem key={item.value} language={item} />\n        ))}\n      </Row>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  list: state.i18n.list\n});\n\nexport default connect(mapStateToProps)(Languages);\n","import React from 'react';\nimport * as styles from './logo.module.scss';\n\nconst Logo = () => <div className={styles.wrapper}>\n    <img src=\"/assets/img/Logo.svg\" alt=\"logo\" />\n    <span className={styles.text}>contractor</span>\n</div>;\n\nexport default Logo;","import React from 'react';\nimport { Layout, Row } from 'antd';\nimport * as styles from './signin.module.scss';\nimport Languages from './components/Languages';\nimport Logo from './components/Logo';\n\nconst { Content } = Layout;\nconst SignIn = () => <Layout className={styles.container}>\n  <Content className={styles.wrapper}>\n    <Row className={styles.content}>\n      <Logo />\n      <Languages />\n    </Row>\n  </Content>\n</Layout>;\n\nexport default SignIn;","import React from 'react';\nimport * as styles from './loader.module.scss';\nimport { Spin } from 'antd';\nconst Loader = () => (\n  <div className={styles.loader}>\n    <Spin />\n  </div>\n);\nexport default Loader;\n","import React from 'react';\nimport { Alert, Row, Button } from 'antd';\nimport * as styles from './start-app-fail.module.scss';\n\nconst StartAppFail = () => <Row\n  type=\"flex\"\n  justify=\"center\"\n  align=\"middle\"\n  className={styles.wrapper}\n>\n  <Alert\n    message=\"Error: failed to connect, server not responding\"\n    description={\n      <Row type=\"flex\" justify=\"center\">\n        <Button type=\"danger\" onClick={() => window.location.reload()}>\n          Try again\n        </Button>\n      </Row>\n    }\n    type=\"error\"\n  />\n</Row>;\n\nexport default StartAppFail;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport SignIn from 'pages/SignIn';\nimport Loader from 'components/Loader';\nimport StartAppFail from 'components/StartAppFail';\n\nconst App = ({ loading, error }) => {\n  if (error !== null) return <StartAppFail />;\n  return (\n    <>\n      {loading ? <Loader /> :\n        <Switch>\n          <Route exact path=\"/signIn\" component={SignIn} />\n          <Redirect to=\"/signIn\" />\n        </Switch>}\n    </>\n\n  );\n};\n\nconst mapStateToProps = state => ({\n  loading: state.asyncInitialState.loading,\n  error: state.asyncInitialState.error\n});\n\nexport default connect(mapStateToProps)(App);","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initialState = {\n  token: localStorage.getItem('token') || null,\n  user: null,\n  isFetching: false\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n","let MrkClientServiceClient = null;\n\nconst setThrift = async ({ THRIFT }) => {\n  MrkClientServiceClient = new window.MrkClientServiceClient(\n    new window.Thrift.Protocol(\n      new window.Thrift.Transport(`${THRIFT.URL}/${THRIFT.API}/thrift/mrk-client-json`)\n    )\n  );\n};\nexport {\n  setThrift,\n  MrkClientServiceClient\n};","import { setThrift, MrkClientServiceClient } from 'api';\nimport { reduce } from 'lodash';\nimport { log } from 'utils/helpers';\nimport moment from 'moment';\n\nconst getInitialState = currentState => {\n  return new Promise(async (resolve, reject) => {\n    let store = currentState();\n    let auth = { ...store.auth };\n    try {\n      const frontRequest = await fetch(`${process.env.PUBLIC_URL}web-config.json`);\n      const frontSettings = await frontRequest.json();\n      await setThrift(frontSettings);\n      if (auth.token !== null) {\n        try {\n          let authenticate = await MrkClientServiceClient.isAuthSessionExpired(\n            auth.token\n          );\n          if (authenticate) auth = {\n            ...auth,\n            token: null\n          };\n        } catch (error) {\n          log(error);\n          auth = {\n            ...auth,\n            token: null\n          };\n          localStorage.removeItem('token');\n        }\n      }\n      const languages = await MrkClientServiceClient.getAllLanguages();\n      const settings = await MrkClientServiceClient.getInfo();\n      const DEFAULT_TRANSLATE = localStorage.getItem('lang') || frontSettings.LANG;\n      const translate = await fetch(\n        `${process.env.PUBLIC_URL}translates/${DEFAULT_TRANSLATE}.json`\n      );\n      let translations = {\n        [DEFAULT_TRANSLATE]: await translate.json()\n      };\n      moment.locale(DEFAULT_TRANSLATE);\n      resolve({\n        ...store,\n        auth,\n        settings: {\n          ...settings,\n          ...frontSettings\n        },\n        i18n: {\n          locale: DEFAULT_TRANSLATE,\n          translations,\n          // list: [\n          //   {\n          //     name: 'English',\n          //     value: 'en'\n          //   },\n          //   {\n          //     name: 'Русский',\n          //     value: 'ru'\n          //   },\n          //   {\n          //     name: 'Қазақша',\n          //     value: 'kk'\n          //   }\n          // ]\n          list: reduce(\n            languages,\n            (array, item, key) => {\n              array.push({\n                name: item,\n                value: key\n              });\n              return array;\n            },\n            []\n          )\n        }\n      });\n    } catch (error) {\n      log(error);\n      reject(error);\n    }\n  });\n};\n\nexport { getInitialState };\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport * as asyncInitialState from 'redux-async-initial-state';\nimport rootReducer from './reducers';\nimport { getInitialState } from './asyncStore';\nimport * as api from 'api';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { syncTranslationWithStore } from 'react-redux-i18n';\nimport { createBrowserHistory } from 'history';\nexport const history = createBrowserHistory();\n\nconst create = () => {\n  const middlewares = [\n    thunk.withExtraArgument(api),\n    routerMiddleware(history),\n    asyncInitialState.middleware(getInitialState)\n  ];\n  const enhancers = [composeWithDevTools(applyMiddleware(...middlewares))];\n  let store = createStore(rootReducer(history), compose(...enhancers));\n  if (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n      module.hot.accept('./reducers', () => {\n        store.replaceReducer(rootReducer(history));\n      });\n    }\n  }\n  return store;\n};\nconst store = create();\nsyncTranslationWithStore(store);\nexport default store;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport * as asyncInitialState from 'redux-async-initial-state';\nimport { reducer as modals } from 'react-redux-modals';\nimport { i18nReducer } from 'react-redux-i18n';\nimport auth from './auth';\nimport settings from './settings';\nexport default history =>\n  asyncInitialState.outerReducer(\n    combineReducers({\n      router: connectRouter(history),\n      asyncInitialState: asyncInitialState.innerReducer,\n      i18n: i18nReducer,\n      modals,\n      auth,\n      settings\n    })\n  );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from 'pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport store, { history } from 'redux/store';\nimport { ModalRoot } from 'react-redux-modals';\nimport * as modalComponents from 'components/Modals';\n\nconst ModalRootWithStore = ModalRoot(store);\n\nconst render = Component => {\n  return ReactDOM.render(\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Component />\n        <ModalRootWithStore modalComponents={modalComponents} />\n      </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\nconsole.log(process.env.NODE_ENV);\nconsole.log(process.env.PUBLIC_URL);\nrender(App);\n\nif (module.hot) {\n  module.hot.accept('pages/App', () => {\n    const NextApp = require('pages/App').default;\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"languages_list__1NJHh\",\"item\":\"languages_item__g1mgX\",\"active\":\"languages_active__3h82-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"signin_wrapper__31duv\",\"content\":\"signin_content__2p7Gu\",\"container\":\"signin_container__jIzED\",\"button\":\"signin_button__bG6AB\",\"form\":\"signin_form__3OtOE\"};"],"sourceRoot":""}